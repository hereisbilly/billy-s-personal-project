// src/pages/DanendraPastContinuousPage.jsx

import React, { useState } from 'react';
import { WorksheetCard, BigButton } from '../components/common';
import { useNavigate } from 'react-router-dom';

// --- Ikon & SVG ---
const IconClock = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>;
const SectionHeader = ({ icon, title, subtitle, color = "violet" }) => {
    const colors = {
        green: "from-green-500 to-emerald-500",
        blue: "from-blue-500 to-sky-500",
        violet: "from-violet-500 to-purple-500"
    };
    return ( <div className={`flex items-center p-4 bg-gradient-to-r ${colors[color]} rounded-xl shadow-lg mb-6`}> <div className="flex-shrink-0 bg-white bg-opacity-20 p-3 rounded-full mr-4">{icon}</div> <div> <h2 className="text-2xl font-bold text-white">{title}</h2> <p className="text-purple-100">{subtitle}</p> </div> </div> );
};

// --- Ilustrasi SVG Kustom ---
const SvgPastContinuousTimeline = () => ( <svg viewBox="0 0 200 80" className="w-full my-4 h-auto"><line x1="10" y1="40" x2="190" y2="40" stroke="#9ca3af" strokeWidth="2" markerEnd="url(#pct-arrow)" /><defs><marker id="pct-arrow" viewBox="0 0 10 10" refX="5" refY="5" markerWidth="6" markerHeight="6" orient="auto-start-reverse"><path d="M 0 0 L 10 5 L 0 10 z" fill="#9ca3af" /></marker></defs><rect x="40" y="25" width="100" height="30" fill="#F5F3FF" rx="5"/><path d="M40 33 L 140 33 M40 47 L 140 47" stroke="#C4B5FD" strokeWidth="4" strokeLinecap="round" strokeDasharray="5 5"/><text y="15" x="90" textAnchor="middle" fontSize="9" fill="#6D28D9" fontWeight="bold">Past Continuous (Long Action)</text><g transform="translate(110 40)"><circle r="5" fill="#F87171"/><path d="M-5 -15 L 0 -5 L 5 -15" stroke="#EF4444" strokeWidth="2" fill="none" strokeLinecap="round"/><text y="-20" textAnchor="middle" fontSize="9" fill="#EF4444" fontWeight="bold">Past Simple (Interruption)</text></g><g transform="translate(170 40)"><circle r="7" fill="#22C55E" stroke="white" strokeWidth="2"/><text y="25" textAnchor="middle" fontSize="10" fill="#16A34A" fontWeight="bold">Now</text></g></svg> );
const SvgReadingIllustration = () => ( <svg viewBox="0 0 200 150" className="w-full md:w-64 h-auto rounded-lg flex-shrink-0"><rect width="200" height="150" fill="#F5F3FF" rx="10"/><g transform="translate(30 70)"><circle r="15" fill="#FDE047"/><path d="M-10 15 C-15 30 15 30 10 15" fill="#3B82F6"/></g><rect x="10" y="80" width="40" height="50" fill="#6366F1" rx="5"/><path d="M50 30 L 70 80 L 60 80 Z" fill="#A78BFA"/><path d="M120 40 H 180 V 100 H 120 Z" fill="#60A5FA" stroke="#3B82F6" strokeWidth="2"/><rect x="130" y="50" width="40" height="40" fill="#EFF6FF"/><path d="M100 100 L 150 100" stroke="#9CA3AF" strokeWidth="3" strokeLinecap="round"/><circle cx="100" cy="50" r="10" fill="#F472B6"/></svg> );
const SvgSpeakingPractice = () => ( <svg viewBox="0 0 100 80" className="w-40 h-32 mx-auto mb-4 text-violet-500"><rect width="100" height="80" fill="#F5F3FF" rx="10"/><g transform="translate(25 40)"><circle r="15" fill="#FDE047"/><path d="M-10 15 C-15 30 15 30 10 15" fill="#C4B5FD"/><path d="M-5 -5 Q 0 0 5 -5" stroke="#334155" strokeWidth="1.5" fill="none"/></g><g transform="translate(75 40)"><circle r="15" fill="#FDE047"/><path d="M-10 15 C-15 30 15 30 10 15" fill="#C4B5FD"/><path d="M-5 -5 Q 0 0 5 -5" stroke="#334155" strokeWidth="1.5" fill="none"/></g><path d="M45 25 L 55 25 M 45 35 L 55 35 M 45 45 L 55 45" stroke="#93C5FD" strokeWidth="3" strokeLinecap="round"/></svg> );
// ✅ ALL MISSING JUMBLED WORD SVGs ARE NOW INCLUDED
const SvgWasRaining = () => <svg viewBox="0 0 100 100" className="w-20 h-20 mx-auto mb-2"><rect width="100" height="100" fill="#F0F9FF" rx="10"/><path d="M30 40 C 10 50, 50 60, 50 40 C 50 20, 80 20, 70 40 C 90 50, 50 60, 50 40" fill="#9CA3AF"/><path d="M30 60 L 25 70 M 50 60 L 45 70 M 70 60 L 65 70" stroke="#60A5FA" strokeWidth="4" strokeLinecap="round"/></svg>;
const SvgWerePlaying = () => <svg viewBox="0 0 100 100" className="w-20 h-20 mx-auto mb-2"><rect width="100" height="100" fill="#F0F9FF" rx="10"/><circle cx="30" cy="50" r="10" fill="#FDE047"/><path d="M20 60 C 20 75, 40 75, 40 60" fill="#334155"/><circle cx="70" cy="50" r="10" fill="#86EFAC"/><path d="M60 60 C 60 75, 80 75, 80 60" fill="#334155"/><circle cx="50" cy="80" r="8" fill="#F97316"/></svg>;
const SvgWasCooking = () => <svg viewBox="0 0 100 100" className="w-20 h-20 mx-auto mb-2"><rect width="100" height="100" fill="#F0F9FF" rx="10"/><path d="M20 80 H 80 V 50 H 20 Z" fill="#E2E8F0"/><rect x="20" y="45" width="60" height="5" fill="#334155"/><circle cx="35" cy="40" r="8" fill="#F97316"/><circle cx="65" cy="40" r="8" fill="#F97316"/><path d="M35 30 L 30 20 M 65 30 L 60 20" stroke="#9CA3AF" strokeWidth="3"/></svg>;
const SvgPhoneRang = () => <svg viewBox="0 0 100 100" className="w-20 h-20 mx-auto mb-2"><rect width="100" height="100" fill="#F0F9FF" rx="10"/><rect x="35" y="20" width="30" height="60" rx="5" fill="#334155"/><rect x="40" y="25" width="20" height="30" fill="#60A5FA"/><path d="M25 30 L 15 40 M25 50 L 15 50 M25 60 L 15 70" stroke="#FBBF24" strokeWidth="3" strokeLinecap="round"/><path d="M75 30 L 85 40 M75 50 L 85 50 M75 60 L 85 70" stroke="#FBBF24" strokeWidth="3" strokeLinecap="round"/></svg>;
const SvgWereWatching = () => <svg viewBox="0 0 100 100" className="w-20 h-20 mx-auto mb-2"><rect width="100" height="100" fill="#F0F9FF" rx="10"/><rect x="20" y="40" width="60" height="40" rx="5" fill="#334155"/><rect x="25" y="45" width="50" height="30" fill="#86EFAC"/><circle cx="35" cy="25" r="8" fill="#FDE047"/><path d="M27 33 C 27 40, 43 40, 43 33" fill="#334155"/><circle cx="65" cy="25" r="8" fill="#FDE047"/><path d="M57 33 C 57 40, 73 40, 73 33" fill="#334155"/></svg>;
const SvgArrived = () => <svg viewBox="0 0 100 100" className="w-20 h-20 mx-auto mb-2"><rect width="100" height="100" fill="#F0F9FF" rx="10"/><path d="M20 80 H 80 V 40 L 50 20 L 20 40 Z" fill="#FDE047" stroke="#EAB308" strokeWidth="2"/><rect x="45" y="60" width="10" height="20" fill="#A16207"/><circle cx="50" cy="50" r="5" fill="#3B82F6"/><path d="M50 50 V 30 L 60 30" stroke="#3B82F6" strokeWidth="3" fill="none"/></svg>;
const SvgWasSleeping = () => <svg viewBox="0 0 100 100" className="w-20 h-20 mx-auto mb-2"><rect width="100" height="100" fill="#F0F9FF" rx="10"/><path d="M20 70 H 80 V 50 H 20 Z" fill="#A5B4FC"/><rect x="20" y="40" width="20" height="10" fill="#818CF8"/><path d="M20 50 C 30 40, 70 40, 80 50" fill="white"/><text x="70" y="30" fontSize="12" fontWeight="bold">Zzz</text></svg>;
const SvgHeardNoise = () => <svg viewBox="0 0 100 100" className="w-20 h-20 mx-auto mb-2"><rect width="100" height="100" fill="#F0F9FF" rx="10"/><path d="M20 40 C 5 30, 5 60, 20 60" fill="#FDE047"/><circle cx="25" cy="50" r="10" fill="#334155"/><text x="50" y="55" fontSize="14" fill="#EF4444" fontWeight="bold">!</text><path d="M60 40 L 70 30 M 65 45 L 75 35 M 70 50 L 80 40" stroke="#EF4444" strokeWidth="3" strokeLinecap="round"/></svg>;
const SvgNotStudying = () => <svg viewBox="0 0 100 100" className="w-20 h-20 mx-auto mb-2"><rect width="100" height="100" fill="#F0F9FF" rx="10"/><rect x="20" y="30" width="60" height="50" fill="white" stroke="#D1D5DB" strokeWidth="2"/><text x="50" y="55" textAnchor="middle" fontSize="14" fill="#334155">A+</text><line x1="20" y1="20" x2="80" y2="80" stroke="#EF4444" strokeWidth="6" strokeLinecap="round"/></svg>;
const SvgWereYouDoing = () => <svg viewBox="0 0 100 100" className="w-20 h-20 mx-auto mb-2"><rect width="100" height="100" fill="#F0F9FF" rx="10"/><circle cx="50" cy="50" r="10" fill="#FDE047"/><path d="M40 60 C 40 75, 60 75, 60 60" fill="#334155"/><text x="50" y="30" textAnchor="middle" fontSize="24" fill="#3B82F6" fontWeight="bold">?</text></svg>;

const DanendraPastContinuousPage = () => {
    // ... (Your existing state and logic functions)
    const navigate = useNavigate();
    const [readingAnswers, setReadingAnswers] = useState({ q1: '', q2: '' });
    const [readingFeedback, setReadingFeedback] = useState({});
    const [jumbledAnswers, setJumbledAnswers] = useState({});
    const [jumbledFeedback, setJumbledFeedback] = useState({});
    const [gameState, setGameState] = useState({ currentIndex: 0, selectedAnswer: null, feedback: null, userAnswers: [] });
    const [gameFinished, setGameFinished] = useState(false);
    const [reviewState, setReviewState] = useState({ currentIndex: 0, selectedAnswer: null, feedback: null, userAnswers: [] });
    const [quizFinished, setQuizFinished] = useState(false);

    const story = "Yesterday at 7 PM, I <strong>was watching</strong> TV in the living room. My mother <strong>was cooking</strong> dinner in the kitchen. Suddenly, the phone <strong>rang</strong>. It <strong>was</strong> my friend, Budi. He <strong>asked</strong>, 'What were you doing?' I <strong>told</strong> him I was watching a movie.";
    const readingQuestions = [ { id: 'q1', question: "What was I doing at 7 PM?", keywords: ['watching tv'] }, { id: 'q2', question: "What happened (the interruption)?", keywords: ['phone rang'] } ];
    const jumbledWordsData = [ { id: 1, jumbled: "It / raining / was / when I woke up", answer: "It was raining when I woke up.", svg: <SvgWasRaining /> }, { id: 2, jumbled: "They / were / football / playing", answer: "They were playing football.", svg: <SvgWerePlaying /> }, { id: 3, jumbled: "was / she / dinner / cooking", answer: "She was cooking dinner.", svg: <SvgWasCooking /> }, { id: 4, jumbled: "The phone / rang / I / was studying / while", answer: "The phone rang while I was studying.", svg: <SvgPhoneRang /> }, { id: 5, jumbled: "We / were / a movie / watching", answer: "We were watching a movie.", svg: <SvgWereWatching /> }, { id: 6, jumbled: "he / arrived / when / she left", answer: "She left when he arrived.", svg: <SvgArrived /> }, { id: 7, jumbled: "The cat / was / on the sofa / sleeping", answer: "The cat was sleeping on the sofa.", svg: <SvgWasSleeping /> }, { id: 8, jumbled: "I / a loud noise / heard / reading / while I was", answer: "I heard a loud noise while I was reading.", svg: <SvgHeardNoise /> }, { id: 9, jumbled: "not / studying / they / were", answer: "They were not studying.", svg: <SvgNotStudying /> }, { id: 10, jumbled: "What / you / were / doing?", answer: "What were you doing?", svg: <SvgWereYouDoing /> } ];
    const gameQuizData = [ { q: "I ___ (read) when the phone rang.", o: ["read", "was reading"], a: "was reading" }, { q: "While she was cooking, he ___ (arrive).", o: ["arrived", "was arriving"], a: "arrived" }, { q: "They ___ (play) basketball at 5 PM yesterday.", o: ["played", "were playing"], a: "were playing" }, { q: "It ___ (rain) all night.", o: ["rained", "was raining"], a: "was raining" }, { q: "He ___ (eat) dinner when I called.", o: ["ate", "was eating"], a: "was eating" }, { q: "I ___ (see) you at the park yesterday.", o: ["saw", "was seeing"], a: "saw" }, { q: "What ___ (you do) when I called?", o: ["did you do", "were you doing"], a: "were you doing" }, { q: "They ___ (not sleep) at 10 PM.", o: ["did not sleep", "were not sleeping"], a: "were not sleeping" }, { q: "She ___ (fall) while she was running.", o: ["fell", "was falling"], a: "fell" }, { q: "He ___ (live) in Jakarta in 2010.", o: ["lived", "was living"], a: "lived" } ];
    const reviewQuizData = [ { q: "I ___ my homework when the lights went out.", o: ["did", "was doing", "do"], a: "was doing" }, { q: "He ___ TV last night.", o: ["watch", "watched", "was watching"], a: "watched" }, { q: "What ___ you doing at 8 PM?", o: ["was", "were", "did"], a: "were" }, { q: "They ___ football when it started to rain.", o: ["played", "were playing", "play"], a: "were playing" }, { q: "She ___ (not listen) while the teacher was talking.", o: ["didn't listen", "not listened", "was not listening"], a: "was not listening" }, { q: "I ___ to school yesterday.", o: ["walk", "walked", "was walking"], a: "walked" }, { q: "My father ___ (cook) dinner.", o: ["cook", "cooked", "was cooking"], a: "was cooking" }, { q: "The phone ___ (ring).", o: ["ring", "rang", "rung"], a: "rang" }, { q: "While we were studying, our friends ___.", o: ["arrive", "arrived", "were arriving"], a: "arrived" }, { q: "He ___ (sleep) at midnight.", o: ["sleeps", "slept", "was sleeping"], a: "was sleeping" }, { q: "It ___ a beautiful day.", o: ["is", "was", "were"], a: "was" }, { q: "She ___ (not see) the car.", o: ["didn't see", "not saw", "was not seeing"], a: "didn't see" }, { q: "___ they playing cards?", o: ["Was", "Were", "Did"], a: "Were" }, { q: "I ___ (eat) breakfast at 7 AM this morning.", o: ["ate", "was eating", "eat"], a: "ate" }, { q: "The bird ___ (sing) on the tree.", o: ["sang", "sings", "was singing"], a: "was singing" }, { q: "___ you go to the party last night?", o: ["Do", "Did", "Were"], a: "Did" }, { q: "He ___ (write) a letter.", o: ["wrote", "was writing", "writes"], a: "was writing" }, { q: "They ___ (not) happy with the result.", o: ["was not", "did not", "were not"], a: "were not" }, { q: "The sun ___ (shine) brightly.", o: ["shone", "was shining", "shine"], a: "was shining" }, { q: "I ___ (call) you, but you didn't answer.", o: ["call", "called", "was calling"], a: "called" } ];
    
    const handleReadingAnswerChange = (id, value) => setReadingAnswers(prev => ({ ...prev, [id]: value }));
    const checkReadingAnswer = (id) => { const question = readingQuestions.find(q => q.id === id); const userAnswer = readingAnswers[id].toLowerCase(); const isCorrect = question.keywords.every(keyword => userAnswer.includes(keyword)); setReadingFeedback(prev => ({ ...prev, [id]: isCorrect ? 'correct' : 'incorrect' })); };
    const handleJumbledAnswerChange = (id, value) => setJumbledAnswers(prev => ({ ...prev, [id]: value }));
    const checkJumbledAnswer = (id) => { const q = jumbledWordsData.find(item => item.id === id); const userAnswer = jumbledAnswers[id]?.trim().replace(/\.$/, "").toLowerCase(); const correctAnswer = q.answer.replace(/\.$/, "").toLowerCase(); setJumbledFeedback(prev => ({ ...prev, [id]: userAnswer === correctAnswer ? 'correct' : 'incorrect' })); };
    const handleGameAnswer = (option) => { if (gameState.feedback) return; const isCorrect = option === gameQuizData[gameState.currentIndex].a; setGameState(prev => ({ ...prev, selectedAnswer: option, feedback: isCorrect ? 'correct' : 'incorrect', userAnswers: [...prev.userAnswers, { ...gameQuizData[prev.currentIndex], userAnswer: option, isCorrect }] })); };
    const handleNextGameQuestion = () => { if (gameState.currentIndex < gameQuizData.length - 1) { setGameState(prev => ({ ...prev, currentIndex: prev.currentIndex + 1, selectedAnswer: null, feedback: null })); } else { setGameFinished(true); } };
    const handleReviewAnswer = (option) => { if (reviewState.feedback) return; const isCorrect = option === reviewQuizData[reviewState.currentIndex].a; setReviewState(prev => ({ ...prev, selectedAnswer: option, feedback: isCorrect ? 'correct' : 'incorrect', userAnswers: [...prev.userAnswers, { ...reviewQuizData[prev.currentIndex], userAnswer: option, isCorrect }] })); };
    const handleNextReviewQuestion = () => { if (reviewState.currentIndex < reviewQuizData.length - 1) { setReviewState(prev => ({ ...prev, currentIndex: prev.currentIndex + 1, selectedAnswer: null, feedback: null })); } else { setQuizFinished(true); } };

    return (
        <div className="max-w-4xl mx-auto space-y-12">
            <h1 className="text-4xl font-extrabold text-slate-800 text-center">Past Continuous vs. Past Simple <span className="text-violet-500">for Danendra</span></h1>
            
            <WorksheetCard> <SectionHeader icon={<IconClock />} title="1. Definition & Grammar" subtitle="Telling a Story" color="violet" /> <div className="grid md:grid-cols-2 gap-8 items-center"><div><p className="text-lg text-slate-700 leading-relaxed mb-6">We use the Past Continuous and Past Simple together to tell a story. <strong>Past Continuous</strong> (was/were +ing) is the long background action. <strong>Past Simple</strong> (verb-ed) is the short action that interrupts it.</p><div className="space-y-4"><div className="p-4 bg-blue-50 rounded-lg border-l-4 border-blue-400"><h4 className="font-bold text-blue-800">Long Action (Background)</h4><p className="text-slate-600">"I <strong className="font-semibold">was watching</strong> TV..."</p></div><div className="p-4 bg-red-50 rounded-lg border-l-4 border-red-400"><h4 className="font-bold text-red-800">Interruption (Short Action)</h4><p className="text-slate-600">"...when the phone <strong className="font-semibold">rang</strong>."</p></div></div></div><div><SvgPastContinuousTimeline/></div></div></WorksheetCard>
            <WorksheetCard> <SectionHeader icon={<IconClock />} title="2. Reading: The Interruption" subtitle="Read the story and answer the questions" color="violet"/> <div className="md:flex md:gap-8 items-center"> <div className="flex-1"> <p className="text-lg text-slate-700 leading-relaxed mb-6" dangerouslySetInnerHTML={{ __html: story.replace(/\b(was watching|was cooking|rang|was|asked|told)\b/g, '<strong class="text-violet-600 font-semibold">$&</strong>') }} /> </div> <div className="flex-shrink-0 w-full md:w-56"><SvgReadingIllustration /></div> </div> <h3 className="text-2xl font-bold text-slate-800 mt-8 mb-4">Answer the questions:</h3> <div className="space-y-4"> {readingQuestions.map(q => ( <div key={q.id}> <label htmlFor={q.id} className="font-semibold text-slate-700">{q.question}</label> <div className="flex items-center space-x-2 mt-1"> <input type="text" id={q.id} value={readingAnswers[q.id]} onChange={(e) => handleReadingAnswerChange(q.id, e.target.value)} className="w-full p-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-violet-400 focus:outline-none" placeholder="Type your answer..." disabled={!!readingFeedback[q.id]} /> <button onClick={() => checkReadingAnswer(q.id)} disabled={!!readingFeedback[q.id]} className="px-4 py-2 bg-violet-500 text-white rounded-lg hover:bg-violet-600 disabled:bg-slate-300">Check</button> </div> {readingFeedback[q.id] && (<p className={`mt-1 text-sm font-bold ${readingFeedback[q.id] === 'correct' ? 'text-green-600' : 'text-red-600'}`}> {readingFeedback[q.id] === 'correct' ? '✓ Correct!' : '✗ Not quite, check the story again.'} </p>)} </div> ))} </div> </WorksheetCard>
            <WorksheetCard> <SectionHeader icon={<IconClock />} title="3. Jumbled Words" subtitle="Arrange the words to make correct sentences" color="blue"/> <div className="grid md:grid-cols-2 gap-6"> {jumbledWordsData.map(item => ( <div key={item.id} className="bg-slate-50 p-4 rounded-lg border flex flex-col"> <div className="flex-grow"> {item.svg} <p className="h-12 flex items-center justify-center text-slate-600 mb-2 font-semibold text-center">{item.jumbled}</p> <input type="text" value={jumbledAnswers[item.id] || ''} onChange={(e) => handleJumbledAnswerChange(item.id, e.target.value)} className={`w-full p-2 border text-center rounded-lg focus:ring-2 focus:outline-none ${!jumbledFeedback[item.id] ? 'border-slate-300 focus:ring-blue-400' : ''} ${jumbledFeedback[item.id] === 'correct' ? 'border-green-500 bg-green-50 text-green-800' : ''} ${jumbledFeedback[item.id] === 'incorrect' ? 'border-red-500 bg-red-50 text-red-800' : ''}`} placeholder="Your sentence..." /> </div> {jumbledFeedback[item.id] && <p className="text-sm mt-1 text-center">Correct: {item.answer}</p>} <button onClick={() => checkJumbledAnswer(item.id)} className="w-full mt-2 text-sm py-1 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:bg-slate-300" disabled={!jumbledAnswers[item.id] || jumbledFeedback[item.id]}> Check Answer </button> </div> ))} </div> </WorksheetCard>
            <WorksheetCard> <SectionHeader icon={<IconClock />} title="4. Speaking: What was happening?" subtitle="Practice your skills" color="violet"/> <div className="grid md:grid-cols-2 gap-8 items-center"> <div className="text-center"><SvgSpeakingPractice /> <h3 className="font-bold text-2xl mb-2 text-slate-800">Speaking Practice</h3> </div> <div> <p className="mb-4 text-lg text-slate-700">Your teacher will show you a picture of a park. Describe what was happening.</p> <h4 className="font-bold text-lg mb-2 text-slate-800">Example Questions:</h4> <ul className="list-disc list-inside space-y-2 text-slate-700 text-lg"><li>What was the dog doing?</li><li>What were the children playing?</li><li>Was the man reading a book?</li><li>What happened when it started to rain?</li></ul> </div> </div> </WorksheetCard>
            <WorksheetCard> <SectionHeader icon={<IconClock />} title="5. Interactive Game" subtitle="Choose the correct verb to tell the story" /> {gameFinished ? (<div className="text-center py-4"><h3 className="text-3xl font-bold text-green-600">Game Complete!</h3><p className="text-xl mt-2">Your Score: {gameState.userAnswers.filter(a=>a.isCorrect).length} / {gameQuizData.length}</p></div>) : ( <div className="text-center"> <p className="font-bold text-slate-500">Question {gameState.currentIndex + 1} of {gameQuizData.length}</p> <p className="text-3xl font-bold my-8 min-h-[4rem] flex items-center justify-center text-slate-800">{gameQuizData[gameState.currentIndex].q.replace('___', '_____')}</p> <div className="w-full max-w-2xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-3"> {gameQuizData[gameState.currentIndex].o.map((option, index) => { let buttonClass = 'bg-sky-500 text-white hover:bg-sky-600'; if (gameState.feedback) { if (option === gameQuizData[gameState.currentIndex].a) buttonClass = 'bg-green-500 text-white'; else if (option === gameState.selectedAnswer) buttonClass = 'bg-red-500 text-white'; else buttonClass = 'bg-slate-200 text-slate-500'; } return (<button key={index} onClick={() => handleGameAnswer(option)} className={`p-4 rounded-lg font-bold text-xl transition-all ${buttonClass}`} disabled={!!gameState.feedback}>{option}</button>); })} </div> {gameState.feedback && ( <div className="mt-6"><BigButton onClick={handleNextGameQuestion} className="bg-slate-800 border-slate-900">Next →</BigButton></div> )} </div> )} </WorksheetCard>
            <WorksheetCard> <SectionHeader icon={<IconClock />} title="6. Review Quiz" subtitle="Final fill-in-the-blanks quiz" color="violet"/> {quizFinished ? ( <div className="text-center py-4"> <h3 className="text-3xl font-bold text-violet-600">Quiz Complete!</h3> <p className="text-xl mt-2">Your Score: {reviewState.userAnswers.filter(a=>a.isCorrect).length} / {reviewQuizData.length}</p> </div> ) : ( <div className="text-center"> <p className="font-bold text-slate-500">Question {reviewState.currentIndex + 1} of {reviewQuizData.length}</p> <p className="text-3xl font-bold my-8 min-h-[4rem] flex items-center justify-center text-slate-800">{reviewQuizData[reviewState.currentIndex].q.replace('___', '_____')}</p> <div className="w-full max-w-2xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-3"> {reviewQuizData[reviewState.currentIndex].o.map((option, index) => { let buttonClass = 'bg-violet-500 text-white hover:bg-violet-600'; if (reviewState.feedback) { if (option === reviewQuizData[reviewState.currentIndex].a) buttonClass = 'bg-green-500 text-white'; else if (option === reviewState.selectedAnswer) buttonClass = 'bg-red-500 text-white'; else buttonClass = 'bg-slate-200 text-slate-500'; } return (<button key={index} onClick={() => handleReviewAnswer(option)} className={`p-4 rounded-lg font-bold text-xl transition-all ${buttonClass}`} disabled={!!reviewState.feedback}>{option}</button>); })} </div> {reviewState.feedback && ( <div className="mt-6"><BigButton onClick={handleNextReviewQuestion} className="bg-slate-800 border-slate-900">Next →</BigButton></div> )} </div> )} </WorksheetCard>
            
            <div className="pt-8"> <BigButton onClick={() => navigate('/')} className="bg-slate-500 border-slate-600"> ← Back to Home </BigButton> </div>
        </div>
    );
};

export default DanendraPastContinuousPage;