// src/pages/SulthanFutureSimplePage.jsx

import React, { useState } from 'react';
import { WorksheetCard, BigButton } from '../components/common';
import { useNavigate } from 'react-router-dom';

// --- Ikon & SVG ---
const IconFuture = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M13 7l5 5m0 0l-5 5m5-5H6" /></svg>;
const SectionHeader = ({ icon, title, subtitle, color = "blue" }) => {
    const colors = {
        green: "from-green-500 to-emerald-500",
        blue: "from-blue-500 to-sky-500",
        violet: "from-violet-500 to-purple-500"
    };
    return ( <div className={`flex items-center p-4 bg-gradient-to-r ${colors[color]} rounded-xl shadow-lg mb-6`}> <div className="flex-shrink-0 bg-white bg-opacity-20 p-3 rounded-full mr-4">{icon}</div> <div> <h2 className="text-2xl font-bold text-white">{title}</h2> <p className="text-sky-100">{subtitle}</p> </div> </div> );
};

// --- Ilustrasi SVG Kustom ---
const SvgFutureTimeline = () => ( <svg viewBox="0 0 200 80" className="w-full my-4 h-auto"><line x1="10" y1="40" x2="190" y2="40" stroke="#9ca3af" strokeWidth="2" markerEnd="url(#arrow)" /><defs><marker id="arrow" viewBox="0 0 10 10" refX="5" refY="5" markerWidth="6" markerHeight="6" orient="auto-start-reverse"><path d="M 0 0 L 10 5 L 0 10 z" fill="#9ca3af" /></marker></defs><g transform="translate(30 40)"><circle r="7" fill="#22C55E" stroke="white" strokeWidth="2"/><text y="25" textAnchor="middle" fontSize="10" fill="#16A34A" fontWeight="bold">Now</text></g><g transform="translate(150 40)"><circle r="6" fill="#818cf8"/><text y="25" textAnchor="middle" fontSize="10" fill="#4f46e5" fontWeight="bold">Tomorrow</text><path d="M-15 -20 L 0 -5 L 15 -20" stroke="#4f46e5" strokeWidth="2" fill="none" strokeLinecap="round"/></g></svg> );
const SvgReadingIllustration = () => ( <svg viewBox="0 0 200 150" className="w-full md:w-64 h-auto rounded-lg flex-shrink-0"><rect width="200" height="150" fill="#EFF6FF"/><path d="M180 20 L 150 50 L 120 20 L 90 50 L 60 20 L 30 50 L 0 20" stroke="#93C5FD" strokeWidth="3" fill="none"/><circle cx="50" cy="30" r="15" fill="#FDE047"/><rect x="10" y="100" width="180" height="30" rx="5" fill="#A5B4FC"/><path d="M30 100 L 40 80 H 160 L 170 100 Z" fill="#818CF8"/><circle cx="60" cy="115" r="8" fill="#374151"/><circle cx="140" cy="115" r="8" fill="#374151"/></svg> );
const SvgSpeakingPractice = () => ( <svg viewBox="0 0 100 80" className="w-40 h-32 mx-auto mb-4 text-sky-500"><rect width="100" height="80" fill="#F0F9FF" rx="10"/><g transform="translate(25 40)"><circle r="15" fill="#FDE047"/><path d="M-10 15 C-15 30 15 30 10 15" fill="#3B82F6"/></g><g transform="translate(75 40)"><circle r="15" fill="#FDE047"/><path d="M-10 15 C-15 30 15 30 10 15" fill="#3B82F6"/><path d="M-5 -5 Q 0 0 5 -5" stroke="#334155" strokeWidth="1.5" fill="none"/></g><path d="M45 25 L 55 25 M 45 35 L 55 35 M 45 45 L 55 45" stroke="#93C5FD" strokeWidth="3" strokeLinecap="round"/></svg> );
// Jumbled Word SVGs
const SvgWillRain = () => <svg viewBox="0 0 100 100" className="w-20 h-20 mx-auto mb-2"><rect width="100" height="100" fill="#F0F9FF" rx="10"/><path d="M30 40 C 10 50, 50 60, 50 40 C 50 20, 80 20, 70 40 C 90 50, 50 60, 50 40" fill="#9CA3AF"/><path d="M30 60 L 25 70 M 50 60 L 45 70 M 70 60 L 65 70" stroke="#60A5FA" strokeWidth="4" strokeLinecap="round"/></svg>;
const SvgGoingToTravel = () => <svg viewBox="0 0 100 100" className="w-20 h-20 mx-auto mb-2"><rect width="100" height="100" fill="#F0F9FF" rx="10"/><circle cx="50" cy="50" r="30" fill="white" stroke="#3B82F6" strokeWidth="2"/><path d="M50 20 C 65 35, 65 65, 50 80 M50 20 C 35 35, 35 65, 50 80" stroke="#3B82F6" strokeWidth="2" fill="none"/><path d="M20 50 H 80" stroke="#3B82F6" strokeWidth="2"/><path d="M70 20 L 80 30 L 60 35 Z" fill="#F87171"/></svg>;
const SvgWillWatchMovie = () => <svg viewBox="0 0 100 100" className="w-20 h-20 mx-auto mb-2"><rect width="100" height="100" fill="#F0F9FF" rx="10"/><rect x="20" y="30" width="60" height="40" rx="5" fill="#334155"/><rect x="25" y="35" width="50" height="30" fill="#86EFAC"/></svg>;
const SvgWillHelp = () => <svg viewBox="0 0 100 100" className="w-20 h-20 mx-auto mb-2"><rect width="100" height="100" fill="#F0F9FF" rx="10"/><circle cx="35" cy="50" r="10" fill="#FDE047"/><path d="M25 60 C 25 75, 45 75, 45 60" fill="#334155"/><circle cx="65" cy="50" r="10" fill="#FDE047"/><path d="M55 60 C 55 75, 75 75, 75 60" fill="#334155"/><path d="M45 65 L 55 65" stroke="#334155" strokeWidth="3"/></svg>;
const SvgGoingToStudy = () => <svg viewBox="0 0 100 100" className="w-20 h-20 mx-auto mb-2"><rect width="100" height="100" fill="#F0F9FF" rx="10"/><rect x="20" y="30" width="60" height="50" fill="white" stroke="#D1D5DB" strokeWidth="2"/><path d="M20 30 L 50 20 L 80 30" fill="none" stroke="#D1D5DB" strokeWidth="2"/><path d="M30 40 h40 M30 50 h40 M30 60 h20" stroke="#A5B4FC" strokeWidth="3"/></svg>;
const SvgWillCall = () => <svg viewBox="0 0 100 100" className="w-20 h-20 mx-auto mb-2"><rect width="100" height="100" fill="#F0F9FF" rx="10"/><rect x="35" y="20" width="30" height="60" rx="5" fill="#334155"/><rect x="40" y="25" width="20" height="30" fill="#60A5FA"/></svg>;
const SvgGoingToVisit = () => <svg viewBox="0 0 100 100" className="w-20 h-20 mx-auto mb-2"><rect width="100" height="100" fill="#F0F9FF" rx="10"/><path d="M20 80 H 80 V 40 L 50 20 L 20 40 Z" fill="#FDE047" stroke="#EAB308" strokeWidth="2"/><rect x="45" y="60" width="10" height="20" fill="#A16207"/></svg>;
const SvgWillBeDoctor = () => <svg viewBox="0 0 100 100" className="w-20 h-20 mx-auto mb-2"><rect width="100" height="100" fill="#F0F9FF" rx="10"/><circle cx="50" cy="40" r="10" fill="#FDE047"/><path d="M40 50 H 60 V 80 H 40 Z" fill="white" stroke="#D1D5DB" strokeWidth="2"/><path d="M45 55 h10 M48 52 v6" stroke="#EF4444" strokeWidth="3"/></svg>;
const SvgWillWin = () => <svg viewBox="0 0 100 100" className="w-20 h-20 mx-auto mb-2"><rect width="100" height="100" fill="#F0F9FF" rx="10"/><path d="M30 40 L 70 40 L 65 80 L 35 80 Z" fill="#FDE047" stroke="#EAB308" strokeWidth="2"/><text x="50" y="65" textAnchor="middle" fontSize="24" fill="#334155" fontWeight="bold">üèÜ</text></svg>;
const SvgWillGetIt = () => <svg viewBox="0 0 100 100" className="w-20 h-20 mx-auto mb-2"><rect width="100" height="100" fill="#F0F9FF" rx="10"/><circle cx="50" cy="50" r="10" fill="#FDE047"/><path d="M40 60 C 40 75, 60 75, 60 60" fill="#334155"/><path d="M30 60h40" stroke="#334155" strokeWidth="3"/></svg>;

const SulthanFutureSimplePage = () => {
    const navigate = useNavigate();
    const [readingAnswers, setReadingAnswers] = useState({ q1: '', q2: '' });
    const [readingFeedback, setReadingFeedback] = useState({});
    const [jumbledAnswers, setJumbledAnswers] = useState({});
    const [jumbledFeedback, setJumbledFeedback] = useState({});
    const [gameState, setGameState] = useState({ currentIndex: 0, selectedAnswer: null, feedback: null, userAnswers: [] });
    const [gameFinished, setGameFinished] = useState(false);
    const [reviewState, setReviewState] = useState({ currentIndex: 0, selectedAnswer: null, feedback: null, userAnswers: [] });
    const [quizFinished, setQuizFinished] = useState(false);

    const story = "Next summer, my family and I are going to travel to Japan. We bought the tickets last week. We are going to visit Tokyo and Kyoto. I think it will be a very exciting trip. The phone is ringing, I'll get it! It's my friend. He asks if I am free tomorrow. I tell him I am not sure, I will check my schedule.";
    const readingQuestions = [ { id: 'q1', question: "What is the plan for next summer?", keywords: ['japan', 'travel'] }, { id: 'q2', question: "What is a spontaneous decision in the story?", keywords: ['will get it', 'answer it'] } ];
    const jumbledWordsData = [ { id: 1, jumbled: "I think / it / rain / will", answer: "I think it will rain.", svg: <SvgWillRain /> }, { id: 2, jumbled: "are / to travel / we / going", answer: "We are going to travel.", svg: <SvgGoingToTravel /> }, { id: 3, jumbled: "she / a movie / is going to / watch", answer: "She is going to watch a movie.", svg: <SvgWillWatchMovie /> }, { id: 4, jumbled: "I / you / will / help", answer: "I will help you.", svg: <SvgWillHelp /> }, { id: 5, jumbled: "they / are going to / study / for the test", answer: "They are going to study for the test.", svg: <SvgGoingToStudy /> }, { id: 6, jumbled: "I / you / will / later / call", answer: "I will call you later.", svg: <SvgWillCall /> }, { id: 7, jumbled: "he / his grandparents / is going to / visit", answer: "He is going to visit his grandparents.", svg: <SvgGoingToVisit /> }, { id: 8, jumbled: "she / will be / a doctor / one day", answer: "She will be a doctor one day.", svg: <SvgWillBeDoctor /> }, { id: 9, jumbled: "I think / our team / will win", answer: "I think our team will win.", svg: <SvgWillWin /> }, { id: 10, jumbled: "Don't worry / I / it / will get", answer: "Don't worry, I will get it.", svg: <SvgWillGetIt /> } ];
    const gameQuizData = [ { q: "Look at the dark clouds! It ___ rain.", o: ["will", "is going to"], a: "is going to" }, { q: "The phone is ringing. I ___ get it.", o: ["will", "am going to"], a: "will" }, { q: "I have a ticket. I ___ watch the concert tomorrow.", o: ["will", "am going to"], a: "am going to" }, { q: "A: It's hot in here. B: Okay, I ___ open the window.", o: ["will", "am going to"], a: "will" }, { q: "They have a plan. They ___ start a new business.", o: ["will", "are going to"], a: "are going to" }, { q: "I predict that you ___ succeed.", o: ["will", "are going to"], a: "will" }, { q: "He saved money. He ___ buy a new phone.", o: ["will", "is going to"], a: "is going to" }, { q: "A: I am hungry. B: I ___ make you a sandwich.", o: ["will", "am going to"], a: "will" }, { q: "Our flight is at 9 AM. We ___ leave for the airport soon.", o: ["will", "are going to"], a: "are going to" }, { q: "Maybe I ___ see you at the party.", o: ["will", "am going to"], a: "will" } ];
    const reviewQuizData = [ { q: "I ___ call you tomorrow.", o: ["will", "am going to"], a: "will" }, { q: "She ___ travel to Korea next month. She bought the ticket.", o: ["will", "is going to"], a: "is going to" }, { q: "A: The bag is heavy. B: I ___ help you.", o: ["will", "am going to"], a: "will" }, { q: "We ___ have dinner at 7 PM. I already booked a table.", o: ["will", "are going to"], a: "are going to" }, { q: "I think he ___ like this gift.", o: ["will", "is going to"], a: "will" }, { q: "They ___ watch a movie. They are choosing one now.", o: ["will", "are going to"], a: "are going to" }, { q: "Don't lift that, you ___ hurt yourself!", o: ["will", "are going to"], a: "will" }, { q: "My brother ___ be a pilot when he grows up.", o: ["will", "is going to"], a: "is going to" }, { q: "It's starting to get dark. I ___ turn on the lights.", o: ["will", "am going to"], a: "will" }, { q: "Are you ___ come to the party on Saturday?", o: ["will", "going to"], a: "going to" }, { q: "I promise I ___ tell anyone.", o: ["will not", "am not going to"], a: "will not" }, { q: "He studied hard, so he ___ pass the exam.", o: ["will", "is going to"], a: "is going to" }, { q: "Perhaps we ___ meet again someday.", o: ["will", "are going to"], a: "will" }, { q: "She packed her swimsuit. She ___ swim.", o: ["will", "is going to"], a: "is going to" }, { q: "That's the doorbell! I ___ see who it is.", o: ["will", "am going to"], a: "will" }, { q: "Look! The bus ___ leave!", o: ["will", "is going to"], a: "is going to" }, { q: "I'm sure you ___ love this song.", o: ["will", "are going to"], a: "will" }, { q: "My parents ___ buy a new house next year.", o: ["will", "are going to"], a: "are going to" }, { q: "I'm tired. I think I ___ go to bed now.", o: ["will", "am going to"], a: "will" }, { q: "They ___ get married in June.", o: ["will", "are going to"], a: "are going to" } ];
    
    const handleReadingAnswerChange = (id, value) => setReadingAnswers(prev => ({ ...prev, [id]: value }));
    const checkReadingAnswer = (id) => { const question = readingQuestions.find(q => q.id === id); const userAnswer = readingAnswers[id].toLowerCase(); const isCorrect = question.keywords.every(keyword => userAnswer.includes(keyword)); setReadingFeedback(prev => ({ ...prev, [id]: isCorrect ? 'correct' : 'incorrect' })); };
    const handleJumbledAnswerChange = (id, value) => setJumbledAnswers(prev => ({ ...prev, [id]: value }));
    const checkJumbledAnswer = (id) => { const q = jumbledWordsData.find(item => item.id === id); const userAnswer = jumbledAnswers[id]?.trim().replace(/\.$/, "").toLowerCase(); const correctAnswer = q.answer.replace(/\.$/, "").toLowerCase(); setJumbledFeedback(prev => ({ ...prev, [id]: userAnswer === correctAnswer ? 'correct' : 'incorrect' })); };
    const handleGameAnswer = (option) => { if (gameState.feedback) return; const isCorrect = option === gameQuizData[gameState.currentIndex].a; setGameState(prev => ({ ...prev, selectedAnswer: option, feedback: isCorrect ? 'correct' : 'incorrect', userAnswers: [...prev.userAnswers, { ...gameQuizData[prev.currentIndex], userAnswer: option, isCorrect }] })); };
    const handleNextGameQuestion = () => { if (gameState.currentIndex < gameQuizData.length - 1) { setGameState(prev => ({ ...prev, currentIndex: prev.currentIndex + 1, selectedAnswer: null, feedback: null })); } else { setGameFinished(true); } };
    const handleReviewAnswer = (option) => { if (reviewState.feedback) return; const isCorrect = option === reviewQuizData[reviewState.currentIndex].a; setReviewState(prev => ({ ...prev, selectedAnswer: option, feedback: isCorrect ? 'correct' : 'incorrect', userAnswers: [...prev.userAnswers, { ...reviewQuizData[prev.currentIndex], userAnswer: option, isCorrect }] })); };
    const handleNextReviewQuestion = () => { if (reviewState.currentIndex < reviewQuizData.length - 1) { setReviewState(prev => ({ ...prev, currentIndex: prev.currentIndex + 1, selectedAnswer: null, feedback: null })); } else { setQuizFinished(true); } };

    return (
        <div className="max-w-4xl mx-auto space-y-12">
            <h1 className="text-4xl font-extrabold text-slate-800 text-center">Module: Future Simple <span className="text-sky-500">for Sulthan</span></h1>
            
            <WorksheetCard> <SectionHeader icon={<IconFuture />} title="1. Definition & Grammar" subtitle="Will vs. Be Going To" /> <div className="grid md:grid-cols-2 gap-8 items-center"><div><p className="text-lg text-slate-700 leading-relaxed mb-6">We use the Future Simple to talk about the future. There are two common forms:</p><div className="space-y-4"><div className="p-4 bg-green-50 rounded-lg border-l-4 border-green-400"><h4 className="font-bold text-green-800">Be Going To (for Plans)</h4><p className="text-slate-600">"I <strong className="font-semibold">am going to watch</strong> a movie tonight."</p></div><div className="p-4 bg-blue-50 rounded-lg border-l-4 border-blue-400"><h4 className="font-bold text-blue-800">Will (for Spontaneous Decisions)</h4><p className="text-slate-600">"The phone is ringing. I <strong className="font-semibold">will get</strong> it!"</p></div></div></div><div><SvgFutureTimeline/></div></div></WorksheetCard>
            <WorksheetCard> <SectionHeader icon={<IconFuture />} title="2. Reading: A Holiday Plan" subtitle="Read the story and answer the questions" /> <div className="md:flex md:gap-8 items-center"> <div className="flex-1"> <p className="text-lg text-slate-700 leading-relaxed mb-6" dangerouslySetInnerHTML={{ __html: story.replace(/\b(are going to travel|are going to visit|will be|will get|will check)\b/g, '<strong class="text-sky-600 font-semibold">$&</strong>') }} /> </div> <div className="flex-shrink-0 w-full md:w-56"><SvgReadingIllustration /></div> </div> <h3 className="text-2xl font-bold text-slate-800 mt-8 mb-4">Answer the questions:</h3> <div className="space-y-4"> {readingQuestions.map(q => ( <div key={q.id}> <label htmlFor={q.id} className="font-semibold text-slate-700">{q.question}</label> <div className="flex items-center space-x-2 mt-1"> <input type="text" id={q.id} value={readingAnswers[q.id]} onChange={(e) => handleReadingAnswerChange(q.id, e.target.value)} className="w-full p-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-sky-400 focus:outline-none" placeholder="Type your answer..." disabled={!!readingFeedback[q.id]} /> <button onClick={() => checkReadingAnswer(q.id)} disabled={!!readingFeedback[q.id]} className="px-4 py-2 bg-sky-500 text-white rounded-lg hover:bg-sky-600 disabled:bg-slate-300">Check</button> </div> {readingFeedback[q.id] && (<p className={`mt-1 text-sm font-bold ${readingFeedback[q.id] === 'correct' ? 'text-green-600' : 'text-red-600'}`}> {readingFeedback[q.id] === 'correct' ? '‚úì Correct!' : '‚úó Not quite, try again.'} </p>)} </div> ))} </div> </WorksheetCard>
            <WorksheetCard> <SectionHeader icon={<IconFuture />} title="3. Jumbled Words" subtitle="Arrange the words to make correct sentences" color="blue"/> <div className="grid md:grid-cols-2 gap-6"> {jumbledWordsData.map(item => ( <div key={item.id} className="bg-slate-50 p-4 rounded-lg border flex flex-col"> <div className="flex-grow"> {item.svg} <p className="h-12 flex items-center justify-center text-slate-600 mb-2 font-semibold text-center">{item.jumbled}</p> <input type="text" value={jumbledAnswers[item.id] || ''} onChange={(e) => handleJumbledAnswerChange(item.id, e.target.value)} className={`w-full p-2 border text-center rounded-lg focus:ring-2 focus:outline-none ${!jumbledFeedback[item.id] ? 'border-slate-300 focus:ring-blue-400' : ''} ${jumbledFeedback[item.id] === 'correct' ? 'border-green-500 bg-green-50 text-green-800' : ''} ${jumbledFeedback[item.id] === 'incorrect' ? 'border-red-500 bg-red-50 text-red-800' : ''}`} placeholder="Your sentence..." /> </div> {jumbledFeedback[item.id] && <p className="text-sm mt-1 text-center">Correct: {item.answer}</p>} <button onClick={() => checkJumbledAnswer(item.id)} className="w-full mt-2 text-sm py-1 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:bg-slate-300" disabled={!jumbledAnswers[item.id] || jumbledFeedback[item.id]}> Check Answer </button> </div> ))} </div> </WorksheetCard>
            <WorksheetCard> <SectionHeader icon={<IconFuture />} title="4. Speaking: Your Future" subtitle="Practice your skills" /> <div className="grid md:grid-cols-2 gap-8 items-center"> <div className="text-center"><SvgSpeakingPractice /> <h3 className="font-bold text-2xl mb-2 text-slate-800">Speaking Practice</h3> </div> <div> <p className="mb-4 text-lg text-slate-700">Answer these questions with your teacher using 'will' or 'be going to'.</p> <h4 className="font-bold text-lg mb-2 text-slate-800">Example Questions:</h4> <ul className="list-disc list-inside space-y-2 text-slate-700 text-lg"><li>What are you going to do this weekend?</li><li>What will you eat for dinner tonight?</li><li>Where are you going to go on your next holiday?</li><li>What will you do if it rains tomorrow?</li><li>What are you going to study next?</li></ul> </div> </div> </WorksheetCard>
            <WorksheetCard> <SectionHeader icon={<IconFuture />} title="5. Interactive Game: Plan or Prediction?" subtitle="Choose the correct future form" /> {gameFinished ? (<div>Finished! Score: {gameState.userAnswers.filter(a=>a.isCorrect).length}/{gameQuizData.length}</div>) : ( <div className="text-center"> <p className="font-bold text-slate-500">Question {gameState.currentIndex + 1} of {gameQuizData.length}</p> <p className="text-3xl font-bold my-8 min-h-[4rem] flex items-center justify-center text-slate-800">{gameQuizData[gameState.currentIndex].q.replace('___', '_____')}</p> <div className="w-full max-w-2xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-3"> {gameQuizData[gameState.currentIndex].o.map((option, index) => { let buttonClass = 'bg-sky-500 text-white hover:bg-sky-600'; if (gameState.feedback) { if (option === gameQuizData[gameState.currentIndex].a) buttonClass = 'bg-green-500 text-white'; else if (option === gameState.selectedAnswer) buttonClass = 'bg-red-500 text-white'; else buttonClass = 'bg-slate-200 text-slate-500'; } return (<button key={index} onClick={() => handleGameAnswer(option)} className={`p-4 rounded-lg font-bold text-xl transition-all ${buttonClass}`} disabled={!!gameState.feedback}>{option}</button>); })} </div> {gameState.feedback && ( <div className="mt-6"><BigButton onClick={handleNextGameQuestion} className="bg-slate-800 border-slate-900">Next ‚Üí</BigButton></div> )} </div> )} </WorksheetCard>
            <WorksheetCard> <SectionHeader icon={<IconFuture />} title="6. Review Quiz" subtitle="Final fill-in-the-blanks quiz" color="violet"/> {quizFinished ? ( <div className="text-center"> <h3 className="text-3xl font-bold text-violet-600">Quiz Complete!</h3> <p className="text-xl mt-2">Your Score: {reviewState.userAnswers.filter(a=>a.isCorrect).length} / {reviewQuizData.length}</p> </div> ) : ( <div className="text-center"> <p className="font-bold text-slate-500">Question {reviewState.currentIndex + 1} of {reviewQuizData.length}</p> <p className="text-3xl font-bold my-8 min-h-[4rem] flex items-center justify-center text-slate-800">{reviewQuizData[reviewState.currentIndex].q.replace('___', '_____')}</p> <div className="w-full max-w-2xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-3"> {reviewQuizData[reviewState.currentIndex].o.map((option, index) => { let buttonClass = 'bg-violet-500 text-white hover:bg-violet-600'; if (reviewState.feedback) { if (option === reviewQuizData[reviewState.currentIndex].a) buttonClass = 'bg-green-500 text-white'; else if (option === reviewState.selectedAnswer) buttonClass = 'bg-red-500 text-white'; else buttonClass = 'bg-slate-200 text-slate-500'; } return (<button key={index} onClick={() => handleReviewAnswer(option)} className={`p-4 rounded-lg font-bold text-xl transition-all ${buttonClass}`} disabled={!!reviewState.feedback}>{option}</button>); })} </div> {reviewState.feedback && ( <div className="mt-6"><BigButton onClick={handleNextReviewQuestion} className="bg-slate-800 border-slate-900">Next ‚Üí</BigButton></div> )} </div> )} </WorksheetCard>
            <div className="pt-8"> <BigButton onClick={() => navigate('/')} className="bg-slate-500 border-slate-600"> ‚Üê Back to Home </BigButton> </div>
        </div>
    );
};

export default SulthanFutureSimplePage;